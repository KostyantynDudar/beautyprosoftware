import requests
import json
import os
import shutil
from datetime import datetime

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
TOKEN_FILE = "/home/public_html/wp-content/uploads/scripts/.cron_env"
OUTPUT_FILE = "/home/public_html/wp-content/uploads/scripts/services.json"
MAIN_FILE = "/home/public_html/wp-content/uploads/2024/06/services.txt"
LOG_FILE = "/home/public_html/wp-content/uploads/scripts/fetch_update_log.txt"

# API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
API_URL = "https://api.aihelps.com/v1/services?fields=name,descriptionPlainText,location_prices,price_currency,category,archive,public,duration,gender"

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_message(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as log:
        log.write(f"[{timestamp}] {message}\n")
    print(f"[{timestamp}] {message}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ Telegram
def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
        response = requests.post(url, data=data)
        if response.status_code == 200:
            log_message("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
        else:
            log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}, {response.text}")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞
def get_token():
    if not os.path.exists(TOKEN_FILE):
        log_message("‚ùå –§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    with open(TOKEN_FILE, "r", encoding="utf-8") as file:
        for line in file:
            if line.startswith("TOKEN="):
                return line.strip().split("=")[1]
    log_message("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ.")
    return None

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
def fetch_services(token):
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    response = requests.get(API_URL, headers=headers)

    if response.status_code == 200:
        data = response.json()
        with open(OUTPUT_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
        log_message(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —É—Å–ª—É–≥ –≤ {OUTPUT_FILE}")
        return data
    else:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
        return None

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def update_services():
    if not os.path.exists(MAIN_FILE):
        log_message(f"‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª {MAIN_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    shutil.copy(MAIN_FILE, f"{MAIN_FILE}.bak")
    log_message(f"üìå –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {MAIN_FILE}.bak")

    with open(MAIN_FILE, "r", encoding="utf-8") as file:
        old_services = {service["id"]: service for service in json.load(file)}

    with open(OUTPUT_FILE, "r", encoding="utf-8") as file:
        new_services = {service["id"]: service for service in json.load(file)}

    added = []
    removed = []
    updated = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    for s_id, service in new_services.items():
        if s_id in old_services:
            if old_services[s_id].get("location_prices") != service.get("location_prices"):
                updated.append(service)
        else:
            added.append(service)

    for s_id in old_services:
        if s_id not in new_services:
            removed.append(old_services[s_id])

    # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    with open(MAIN_FILE, "w", encoding="utf-8") as file:
        json.dump(list(new_services.values()), file, ensure_ascii=False, indent=4)

    log_message(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏—è: +{len(added)} –¥–æ–±–∞–≤–ª–µ–Ω–æ, -{len(removed)} —É–¥–∞–ª–µ–Ω–æ, ‚úè {len(updated)} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ Telegram
    report_message = (
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥:</b>\n"
        f"‚ûï –ù–æ–≤—ã—Ö —É—Å–ª—É–≥: <b>{len(added)}</b>\n"
        f"‚ûñ –£–¥–∞–ª—ë–Ω–Ω—ã—Ö —É—Å–ª—É–≥: <b>{len(removed)}</b>\n"
        f"‚úè –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: <b>{len(updated)}</b>\n"
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ <code>{MAIN_FILE}</code>"
    )
    send_telegram_message(report_message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    log_message("--- –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---")
    token = get_token()
    if not token:
        log_message("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return
    
    services = fetch_services(token)
    if services:
        update_services()
    
    log_message("--- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---")

if __name__ == "__main__":
    main()
